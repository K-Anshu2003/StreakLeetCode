// Maximum total damage with spell casting
class Solution {
    public long maximumTotalDamage(int[] power) {
        Map<Integer, Long> freq = new HashMap<>();
        for(int i : power){
            freq.put(i, freq.getOrDefault(i, 0L) + 1);
        }
        
        List<Integer> keys = new ArrayList<>(freq.keySet());
        Collections.sort(keys);

        int n = keys.size();
        long[] dp = new long[n];

        dp[0] = freq.get(keys.get(0)) * keys.get(0);

        for(int i=1; i<n; i++){
            long take = freq.get(keys.get(i)) * keys.get(i);
            int prev = binarySearch(keys, i-1, keys.get(i)-3);
            if(prev >= 0){
                take += dp[prev];
            }
            dp[i] = Math.max(dp[i-1], take);
        }
        return dp[n-1];
    }

    private int binarySearch(List<Integer> keys, int j, int val){
        int l=0, r=j, ans = -1;
        while(l<=r){
            int mid = (l+r)/2;
            if(keys.get(mid) <= val){
                ans = mid;
                l = mid+1;
            }else{
                r = mid-1;
            }
        }  
        return ans;
    }
}
